{"version":3,"sources":["store/ducks/auth/type/index.ts","store/ducks/auth/selector.ts","store/ducks/users/type/index.ts","store/ducks/auth/actionCreator.ts","components/Header/index.tsx","components/Loader.tsx","store/ducks/users/actionCreator.ts","store/ducks/posts/type/index.ts","store/ducks/users/selector.ts","pages/Users.tsx","utils/useQuery.ts","store/ducks/posts/actionCreator.ts","store/ducks/post/type/index.ts","store/ducks/posts/selector.ts","components/PostForm.tsx","components/GoBackButton.tsx","pages/Posts.tsx","store/ducks/post/actionCreator.ts","store/ducks/post/selector.ts","pages/PostDetail.tsx","pages/SignIn.tsx","App.tsx","reportWebVitals.ts","store/ducks/auth/reducer.ts","store/ducks/post/reducer.ts","store/ducks/posts/reducer.ts","store/ducks/users/reducer.ts","store/rootReducer.ts","api/index.ts","store/ducks/auth/saga.ts","store/ducks/post/saga.ts","store/ducks/posts/saga.ts","store/ducks/users/saga.ts","store/rootSaga.ts","store/store.ts","index.tsx"],"names":["LoadingAuthState","AuthActionType","LoadingUserState","UsersActionType","selectAuthState","state","auth","selectIsAuth","isAuth","setLoadingAuth","payload","type","SET_LOADING","setAuthUser","SET_AUTH","useStyles","makeStyles","root","flexGrow","marginBottom","title","marginRight","navLink","color","textDecoration","navLinkActive","backgroundColor","padding","borderRadius","Header","classes","dispatch","useDispatch","useSelector","className","AppBar","position","Toolbar","Grid","container","direction","spacing","item","xs","Typography","variant","activeClassName","exact","to","justify","Button","onClick","SET_LOGOUT","window","localStorage","removeItem","Loader","CircularProgress","LoadingState","PostsActionType","setLoadingUsers","selectUsersState","users","selectUsersItems","selectUserLoadingState","loading","selectIsUsersLoading","LOADING","paper","Users","useEffect","FETCH_USERS","map","user","lg","Paper","elevation","alignItems","name","email","id","fontSize","titleAccess","useQuery","URLSearchParams","useLocation","search","PostActionType","setLoadingPost","setPosts","SET_POSTS","addPost","ADD_POST","deletePost","DELETE_POST","selectPostsState","posts","selectPostsItems","selectPostsLoadingState","selectIsPostsLoading","PostForm","buttonName","body","useForm","defaultValues","register","handleSubmit","reset","sm","onSubmit","TextField","inputRef","required","label","fullWidth","margin","multiline","GoBackButton","history","useHistory","goBack","Posts","query","userId","Number","get","addPostWithForm","useCallback","FETCH_ADD_POST","FETCH_DELETE_POST","console","log","FETCH_POSTS","fetchPosts","post","style","md","IconButton","setPost","SET_POST","setComments","SET_COMMENTS","updatePost","UPDATE_POST","selectPostState","selectPostItem","selectCommentsItems","comments","selectPostLoadingState","selectIsPostLoading","PostDetail","React","useState","open","setOpen","postId","useParams","FETCH_UPDATE_POST","FETCH_POST","fetchPost","FETCH_COMMENTS","fetchComments","Divider","comment","wrapper","height","SignIn","data","FETCH_SET_AUTH","push","App","getItem","JSON","parse","CURRENT_AUTH","currentIsAuth","Container","maxWidth","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialAuthState","undefined","LOADED","authReducer","produce","draft","action","initialPostsState","postReducer","postsReducer","index","findIndex","splice","initialUsersState","usersReducer","SET_USERS","rootReducer","combineReducers","instance","axios","create","baseURL","userAPI","response","postsAPI","put","delete","status","fetchAuthSaga","sagaAuthWatcher","call","setItem","stringify","ERROR","takeEvery","workerFetchPostSaga","workerFetchCommentsSaga","workerUpdatePostSaga","sagaPostWatcher","fetchPostsSaga","addPostSaga","deletePostSaga","sagaPostsWatcher","fetchUsersSaga","sagaUserWatcher","rootSaga","all","saga","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.7aaf5b90.chunk.js","sourcesContent":["import { Action } from 'redux'\r\nimport { SignInFormData } from '../../../../pages/SignIn'\r\n\r\nexport interface IAuthUser {\r\n    id: number\r\n    username: string\r\n    password: string\r\n}\r\n\r\nexport interface IAuthState {\r\n    isAuth: boolean\r\n    user?: IAuthUser\r\n    loading: LoadingAuthState\r\n}\r\n\r\nexport enum LoadingAuthState {\r\n    LOADING = 'LOADING',\r\n    LOADED = 'LOADED',\r\n    ERROR = 'ERROR',\r\n}\r\n\r\nexport enum AuthActionType {\r\n    FETCH_SET_AUTH = 'auth/FETCH_SET_AUTH',\r\n    SET_AUTH = 'auth/SET_AUTH',\r\n    SET_LOGOUT = 'auth/SET_LOGOUT',\r\n    CURRENT_AUTH = 'auth/CURRENT_AUTH',\r\n    SET_LOADING = 'auth/SET_LOADING',\r\n}\r\n//* API POST sign in user\r\nexport interface IFetchAuthUserAction extends Action<AuthActionType> {\r\n    type: AuthActionType.FETCH_SET_AUTH,\r\n    payload: SignInFormData\r\n}\r\nexport interface ISetAuthAction extends Action<AuthActionType> {\r\n    type: AuthActionType.SET_AUTH\r\n    payload: IAuthUser\r\n}\r\n//* Logout user\r\nexport interface ISetLogoutAction extends Action<AuthActionType> {\r\n    type: AuthActionType.SET_LOGOUT\r\n}\r\n\r\nexport interface ICurrentAuthAction extends Action<AuthActionType> {\r\n    type: AuthActionType.CURRENT_AUTH\r\n    payload: IAuthUser\r\n}\r\n\r\nexport interface ISetAuthLoadingAction extends Action<AuthActionType> {\r\n    type: AuthActionType.SET_LOADING\r\n    payload: LoadingAuthState\r\n}\r\n\r\nexport type AuthAction = ISetAuthAction | ISetLogoutAction | ISetAuthLoadingAction | IFetchAuthUserAction | ICurrentAuthAction\r\n","import { RootState } from '../../rootReducer'\r\nimport { LoadingAuthState } from './type'\r\n\r\nconst selectAuthState = (state: RootState) => state.auth\r\n\r\nexport const selectIsAuth = (state: RootState): boolean => selectAuthState(state).isAuth\r\n\r\nexport const selectAuthLoadingState = (state: RootState): LoadingAuthState =>\r\n  selectAuthState(state).loading\r\n\r\nexport const selectIsAuthLoading = (state: RootState): boolean =>\r\n  selectAuthLoadingState(state) === LoadingAuthState.LOADING\r\n\r\nexport const selectIsAuthLoaded = (state: RootState): boolean =>\r\n  selectAuthLoadingState(state) === LoadingAuthState.LOADED\r\n","import { Action } from 'redux'\r\nimport { IUser } from '../../../../type'\r\n\r\nexport interface IUserState {\r\n  users: IUser[]\r\n  loading: LoadingUserState\r\n}\r\n\r\nexport enum LoadingUserState {\r\n  LOADING = 'LOADING',\r\n  LOADED = 'LOADED',\r\n  ERROR = 'ERROR',\r\n}\r\n\r\nexport enum UsersActionType {\r\n  FETCH_USERS = 'users/FETCH_USERS',\r\n  SET_USERS = 'users/SET_USERS',\r\n\r\n  SET_LOADING = 'userS/SET_LOADING',\r\n}\r\n\r\nexport interface IFetchUsersAction extends Action<UsersActionType> {\r\n  type: UsersActionType.FETCH_USERS\r\n}\r\n\r\nexport interface ISetUsersAction extends Action<UsersActionType> {\r\n  type: UsersActionType.SET_USERS\r\n  payload: IUser[]\r\n}\r\n\r\nexport interface ISetUsersLoadingAction extends Action<UsersActionType> {\r\n  type: UsersActionType.SET_LOADING\r\n  payload: LoadingUserState\r\n}\r\n\r\nexport type UsersAction = ISetUsersAction | ISetUsersLoadingAction | IFetchUsersAction\r\n","import { SignInFormData } from '../../../pages/SignIn'\r\nimport {\r\n    AuthActionType,\r\n    ISetAuthAction,\r\n    LoadingAuthState,\r\n    ISetAuthLoadingAction,\r\n    IFetchAuthUserAction,\r\n    IAuthUser,\r\n    ICurrentAuthAction,\r\n    ISetLogoutAction\r\n} from './type'\r\n\r\nexport const setLoadingAuth = (payload: LoadingAuthState): ISetAuthLoadingAction => ({\r\n    type: AuthActionType.SET_LOADING,\r\n    payload,\r\n})\r\nexport const fetchAuthUser = (payload: SignInFormData): IFetchAuthUserAction => ({\r\n    type: AuthActionType.FETCH_SET_AUTH,\r\n    payload\r\n})\r\nexport const setAuthUser = (payload: IAuthUser): ISetAuthAction => ({\r\n    type: AuthActionType.SET_AUTH,\r\n    payload,\r\n})\r\nexport const setLogoutUser = (): ISetLogoutAction => ({\r\n    type: AuthActionType.SET_LOGOUT,\r\n})\r\nexport const isCurrentAuthUser = (payload: IAuthUser): ICurrentAuthAction => ({\r\n    type: AuthActionType.CURRENT_AUTH,\r\n    payload,\r\n})\r\n","import React from 'react'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport { selectIsAuth } from '../../store/ducks/auth/selector'\r\nimport { setLogoutUser } from '../../store/ducks/auth/actionCreator'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginBottom: 20,\r\n  },\r\n  title: {\r\n    'display': 'flex',\r\n    'flexDirection': 'row',\r\n    '& h6': {\r\n      marginRight: '10px',\r\n    },\r\n  },\r\n  navLink: {\r\n    color: 'white',\r\n    textDecoration: 'none',\r\n  },\r\n  navLinkActive: {\r\n    color: 'white',\r\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n    padding: '5px',\r\n    borderRadius: '7px',\r\n  },\r\n})\r\n\r\nexport const Header: React.FC = () => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const isAuth = useSelector(selectIsAuth)\r\n  const onClickLogout = () => {\r\n    dispatch(setLogoutUser())\r\n    window.localStorage.removeItem('isAuth')\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position='static'>\r\n        <Toolbar>\r\n          <Grid container direction='row' spacing={4}>\r\n            <Grid item xs={10} className={classes.title}>\r\n              <Typography variant='h6'>\r\n                <NavLink\r\n                  activeClassName={classes.navLinkActive}\r\n                  className={classes.navLink}\r\n                  exact\r\n                  to='/'>\r\n                  Home\r\n                </NavLink>\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={2} container justify='flex-end'>\r\n              <Grid item>\r\n                {!isAuth ? (\r\n                  <Button color='inherit'>\r\n                    <Link to='/auth/signIn' className={classes.navLink}>\r\n                      Login\r\n                    </Link>\r\n                  </Button>\r\n                ) : (\r\n                  <Button color='inherit' onClick={onClickLogout}>\r\n                    <Link to='/' className={classes.navLink}>\r\n                      SignOut\r\n                    </Link>\r\n                  </Button>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nexport const Loader = () => {\r\n  return (\r\n    <Grid container justify='center'>\r\n      <Grid container justify='center' item xs={12}>\r\n        <CircularProgress />\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n","import { IUser } from '../../../type'\r\nimport {\r\n  IFetchUsersAction,\r\n  ISetUsersAction,\r\n  ISetUsersLoadingAction,\r\n  LoadingUserState,\r\n  UsersActionType,\r\n} from './type'\r\n\r\nexport const setLoadingUsers = (payload: LoadingUserState): ISetUsersLoadingAction => ({\r\n  type: UsersActionType.SET_LOADING,\r\n  payload,\r\n})\r\nexport const fetchUsers = (): IFetchUsersAction => ({\r\n  type: UsersActionType.FETCH_USERS,\r\n})\r\nexport const setUsers = (payload: IUser[]): ISetUsersAction => ({\r\n  type: UsersActionType.SET_USERS,\r\n  payload,\r\n})\r\n","import { Action } from 'redux'\r\nimport { IPost } from '../../../../type'\r\n\r\nexport interface IPostsState {\r\n  posts: IPost[]\r\n  loading: LoadingState\r\n}\r\n\r\nexport enum LoadingState {\r\n  LOADING = 'LOADING',\r\n  LOADED = 'LOADED',\r\n  ERROR = 'ERROR',\r\n}\r\n\r\nexport enum PostsActionType {\r\n  FETCH_POSTS = 'posts/FETCH_POSTS',\r\n  SET_POSTS = 'posts/SET_POSTS',\r\n  FETCH_ADD_POST = 'posts/FETCH_ADD_POST',\r\n  ADD_POST = 'posts/ADD_POST',\r\n  FETCH_DELETE_POST = 'posts/FETCH_DELETE_POST',\r\n  DELETE_POST = 'posts/DELETE_POST',\r\n  SET_LOADING = 'posts/SET_LOADING',\r\n}\r\n\r\nexport interface ISetPostsAction extends Action<PostsActionType> {\r\n  type: PostsActionType.SET_POSTS\r\n  payload: Array<IPost>\r\n}\r\n\r\nexport interface IFetchAction extends Action<PostsActionType> {\r\n  type: PostsActionType.FETCH_POSTS\r\n  payload: number\r\n}\r\n//* interface Create post\r\n\r\nexport interface IFetchAddPostAction extends Action<PostsActionType> {\r\n  type: PostsActionType.FETCH_ADD_POST\r\n  payload: {\r\n    title: string\r\n    body: string\r\n    userId: number\r\n  }\r\n}\r\nexport interface IAddPostAction extends Action<PostsActionType> {\r\n  type: PostsActionType.ADD_POST\r\n  payload: IPost\r\n}\r\n\r\n//* interface Delete post\r\nexport interface IFetchDeletePostAction extends Action<PostsActionType> {\r\n  type: PostsActionType.FETCH_DELETE_POST\r\n  payload: number\r\n}\r\nexport interface IDeletePostAction extends Action<PostsActionType> {\r\n  type: PostsActionType.DELETE_POST\r\n  payload: number\r\n}\r\n\r\nexport interface ISetLoadingAction extends Action<PostsActionType> {\r\n  type: PostsActionType.SET_LOADING\r\n  payload: LoadingState\r\n}\r\n\r\nexport type PostsAction =\r\n  | ISetPostsAction\r\n  | IAddPostAction\r\n  | ISetLoadingAction\r\n  | IFetchAction\r\n  | IFetchAddPostAction\r\n  | IFetchDeletePostAction\r\n  | IDeletePostAction\r\n","import { RootState } from '../../rootReducer'\r\nimport { IUserState, LoadingUserState } from './type'\r\n\r\nconst selectUsersState = (state: RootState) => state.users\r\n\r\nexport const selectUsersItems = (state: RootState): IUserState['users'] =>\r\n  selectUsersState(state).users\r\n\r\nexport const selectUserLoadingState = (state: RootState): LoadingUserState =>\r\n  selectUsersState(state).loading\r\nexport const selectIsUsersLoading = (state: RootState): boolean =>\r\n  selectUserLoadingState(state) === LoadingUserState.LOADING\r\nexport const selectIsUsersLoaded = (state: RootState): boolean =>\r\n  selectUserLoadingState(state) === LoadingUserState.LOADED\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport NextIcon from '@material-ui/icons/NavigateNext'\r\n\r\nimport { Loader } from '../components/Loader'\r\n\r\nimport { fetchUsers } from '../store/ducks/users/actionCreator'\r\nimport { selectIsUsersLoading, selectUsersItems } from '../store/ducks/users/selector'\r\n\r\nconst useStyles = makeStyles({\r\n  paper: {\r\n    padding: 10,\r\n  },\r\n})\r\nexport const Users: React.FC = () => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const users = useSelector(selectUsersItems)\r\n  const loading = useSelector(selectIsUsersLoading)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchUsers())\r\n  }, [dispatch])\r\n\r\n  if (loading) return <Loader />\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      {users.map((user) => (\r\n        <Grid key={user.id} item xs={12} lg={10}>\r\n          <Paper elevation={10} className={classes.paper}>\r\n            <Grid container alignItems='center'>\r\n              <Grid item xs={11}>\r\n                <Typography>{user.name}</Typography>\r\n                <Typography>E-mail: {user.email}</Typography>\r\n              </Grid>\r\n              <Grid item xs={1}>\r\n                <Link to={`/posts?userId=${user.id}`}>\r\n                  <NextIcon fontSize='large' titleAccess='Posts User' color='primary' />\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  )\r\n}\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nexport function useQuery() {\r\n    return new URLSearchParams(useLocation().search)\r\n}","import { IPost } from '../../../type'\r\nimport {\r\n  IAddPostAction,\r\n  IFetchAction,\r\n  IFetchAddPostAction,\r\n  ISetLoadingAction,\r\n  ISetPostsAction,\r\n  LoadingState,\r\n  PostsActionType,\r\n  IDeletePostAction,\r\n  IFetchDeletePostAction,\r\n} from './type'\r\n\r\nexport const fetchPosts = (userId: number): IFetchAction => ({\r\n  type: PostsActionType.FETCH_POSTS,\r\n  payload: userId,\r\n})\r\nexport const setLoadingPost = (payload: LoadingState): ISetLoadingAction => ({\r\n  type: PostsActionType.SET_LOADING,\r\n  payload,\r\n})\r\nexport const setPosts = (payload: Array<IPost>): ISetPostsAction => ({\r\n  type: PostsActionType.SET_POSTS,\r\n  payload,\r\n})\r\nexport const fetchAddPost = (payload: {\r\n  title: string\r\n  body: string\r\n  userId: number\r\n}): IFetchAddPostAction => ({\r\n  type: PostsActionType.FETCH_ADD_POST,\r\n  payload,\r\n})\r\nexport const addPost = (payload: IPost): IAddPostAction => ({\r\n  type: PostsActionType.ADD_POST,\r\n  payload,\r\n})\r\n\r\nexport const fetchDeletePost = (payload: number): IFetchDeletePostAction => ({\r\n  type: PostsActionType.FETCH_DELETE_POST,\r\n  payload,\r\n})\r\nexport const deletePost = (payload: number): IDeletePostAction => ({\r\n  type: PostsActionType.DELETE_POST,\r\n  payload,\r\n})\r\n","import { Action } from 'redux'\r\nimport { IComment, IPost } from '../../../../type'\r\n\r\nexport interface IPostState {\r\n  post?: IPost\r\n  comments: IComment[]\r\n  loading: LoadingState\r\n}\r\n\r\nexport enum LoadingState {\r\n  LOADING = 'LOADING',\r\n  LOADED = 'LOADED',\r\n  ERROR = 'ERROR',\r\n}\r\n\r\nexport enum PostActionType {\r\n  FETCH_POST = 'post/FETCH_POST',\r\n  SET_POST = 'post/SET_POST',\r\n  FETCH_COMMENTS = 'post/FETCH_COMMENTS',\r\n  SET_COMMENTS = 'post/SET_COMMENTS',\r\n  FETCH_UPDATE_POST = 'post/FETCH_UPDATE_POST',\r\n  UPDATE_POST = 'post/UPDATE_POST',\r\n  SET_LOADING = 'post/SET_LOADING',\r\n}\r\n\r\nexport interface ISetPostAction extends Action<PostActionType> {\r\n  type: PostActionType.SET_POST\r\n  payload: IPost\r\n}\r\n//* API GET post by postId\r\nexport interface IFetchPostAction extends Action<PostActionType> {\r\n  type: PostActionType.FETCH_POST\r\n  payload: number\r\n}\r\n//*  Set Comments\r\nexport interface ISetCommentsAction extends Action<PostActionType> {\r\n  type: PostActionType.SET_COMMENTS\r\n  payload: IComment[]\r\n}\r\n\r\nexport interface IFetchCommentsAction extends Action<PostActionType> {\r\n  type: PostActionType.FETCH_COMMENTS\r\n  payload: number\r\n}\r\n//* Update post\r\nexport interface IFetchUpdatePostAction extends Action<PostActionType> {\r\n  type: PostActionType.FETCH_UPDATE_POST\r\n  payload: IPost\r\n}\r\nexport interface IUpdatePostAction extends Action<PostActionType> {\r\n  type: PostActionType.UPDATE_POST\r\n  payload: IPost\r\n}\r\n\r\nexport interface ISetLoadingAction extends Action<PostActionType> {\r\n  type: PostActionType.SET_LOADING\r\n  payload: LoadingState\r\n}\r\n\r\nexport type PostAction =\r\n  | ISetPostAction\r\n  | ISetLoadingAction\r\n  | IFetchPostAction\r\n  | IFetchUpdatePostAction\r\n  | IUpdatePostAction\r\n  | ISetCommentsAction\r\n  | IFetchCommentsAction\r\n","import { RootState } from '../../rootReducer'\r\nimport { IPostsState, LoadingState } from './type'\r\n\r\nconst selectPostsState = (state: RootState) => state.posts\r\n\r\nexport const selectPostsItems = (state: RootState): IPostsState['posts'] =>\r\n  selectPostsState(state).posts\r\n\r\nexport const selectPostsLoadingState = (state: RootState): LoadingState =>\r\n  selectPostsState(state).loading\r\n\r\nexport const selectIsPostsLoading = (state: RootState): boolean =>\r\n  selectPostsLoadingState(state) === LoadingState.LOADING\r\n\r\nexport const selectIsPostsLoaded = (state: RootState): boolean =>\r\n  selectPostsLoadingState(state) === LoadingState.LOADED\r\n","import React from 'react'\r\nimport { useForm } from 'react-hook-form'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\n\r\ninterface FormData {\r\n  title: string\r\n  body: string\r\n}\r\n\r\ninterface IProps {\r\n  title?: string\r\n  body?: string\r\n  buttonName: string\r\n  addPost: (title: string, body: string) => void\r\n}\r\n\r\nexport const PostForm: React.FC<IProps> = ({ addPost, buttonName, body, title }) => {\r\n  const { register, handleSubmit, reset } = useForm<FormData>({\r\n    defaultValues: { title, body },\r\n  })\r\n  const onSubmit = ({ title, body }: FormData) => {\r\n    addPost(title, body)\r\n    reset()\r\n  }\r\n\r\n  return (\r\n    <Grid item xs={12} sm={7}>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <TextField\r\n          inputRef={register({ required: true })}\r\n          label='Name post'\r\n          name='title'\r\n          variant='outlined'\r\n          fullWidth\r\n          margin='normal'\r\n          required={true}\r\n        />\r\n        <TextField\r\n          inputRef={register({ required: true })}\r\n          label='Description'\r\n          name='body'\r\n          variant='outlined'\r\n          fullWidth\r\n          multiline\r\n          required={true}\r\n          margin='normal'\r\n        />\r\n\r\n        <Button type='submit' variant='contained' color='primary'>\r\n          {buttonName}\r\n        </Button>\r\n      </form>\r\n    </Grid>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\nimport ArrowBack from '@material-ui/icons/ArrowBack'\r\n\r\nexport const GoBackButton = () => {\r\n  const history = useHistory()\r\n  return (\r\n    <Grid item xs={12}>\r\n      <Button variant='outlined' color='primary' onClick={() => history.goBack()}>\r\n        <ArrowBack /> &nbsp; Go Back\r\n      </Button>\r\n    </Grid>\r\n  )\r\n}\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { useQuery } from '../utils/useQuery'\r\nimport {\r\n  fetchPosts,\r\n  fetchAddPost,\r\n  fetchDeletePost,\r\n} from '../store/ducks/posts/actionCreator'\r\n\r\nimport { selectPostsItems, selectIsPostsLoading } from '../store/ducks/posts/selector'\r\nimport { PostForm } from '../components/PostForm'\r\nimport { GoBackButton } from '../components/GoBackButton'\r\nimport { Loader } from '../components/Loader'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport IconButton from '@material-ui/core/IconButton'\r\n\r\nimport NextIcon from '@material-ui/icons/NavigateNext'\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutline'\r\n\r\nexport const Posts: React.FC = () => {\r\n  const query = useQuery()\r\n  let userId = Number(query.get('userId'))\r\n  const dispatch = useDispatch()\r\n  const posts = useSelector(selectPostsItems)\r\n  const loading = useSelector(selectIsPostsLoading)\r\n\r\n  if (!userId) {\r\n    userId = 1\r\n  }\r\n\r\n  const addPostWithForm = useCallback(\r\n    (title: string, body: string) => {\r\n      dispatch(fetchAddPost({ title, body, userId }))\r\n    },\r\n    [dispatch, userId]\r\n  )\r\n  const deletePost = useCallback(\r\n    (id: number) => {\r\n      dispatch(fetchDeletePost(id))\r\n      console.log('delete_post', id)\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (userId) {\r\n      dispatch(fetchPosts(userId))\r\n    }\r\n  }, [dispatch, userId])\r\n\r\n  if (loading) return <Loader />\r\n  return (\r\n    <Grid container spacing={4}>\r\n      <GoBackButton />\r\n      {posts.map((post) => (\r\n        <Grid item xs={12} key={post.id}>\r\n          <Paper elevation={7} style={{ padding: 10 }}>\r\n            <Grid container spacing={1} alignItems='center'>\r\n              <Grid item xs={12} md={11}>\r\n                <Typography variant='h6'>{post.title}</Typography>\r\n                <Typography>{post.body}</Typography>\r\n              </Grid>\r\n              <Grid container alignItems='center' item xs={12} md={1}>\r\n                <Grid item xs={6} md={6}>\r\n                  <IconButton color='secondary' onClick={() => deletePost(post.id)}>\r\n                    <DeleteIcon />\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid container justify='flex-end' item xs={6} md={6}>\r\n                  <Link to={`/posts/${post.id}?userId=${post.userId}`}>\r\n                    <NextIcon fontSize='large' titleAccess='Posts User' color='primary' />\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      ))}\r\n\r\n      <Grid container justify='center' item>\r\n        <PostForm buttonName='Add' addPost={addPostWithForm} />\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n","import { IComment, IPost } from '../../../type'\r\nimport {\r\n  IFetchCommentsAction,\r\n  IFetchPostAction,\r\n  IFetchUpdatePostAction,\r\n  ISetCommentsAction,\r\n  ISetLoadingAction,\r\n  ISetPostAction,\r\n  IUpdatePostAction,\r\n  LoadingState,\r\n  PostActionType,\r\n} from './type'\r\n\r\nexport const setLoadingPost = (payload: LoadingState): ISetLoadingAction => ({\r\n  type: PostActionType.SET_LOADING,\r\n  payload,\r\n})\r\nexport const fetchPost = (postId: number): IFetchPostAction => ({\r\n  type: PostActionType.FETCH_POST,\r\n  payload: postId,\r\n})\r\nexport const setPost = (payload: IPost): ISetPostAction => ({\r\n  type: PostActionType.SET_POST,\r\n  payload,\r\n})\r\nexport const fetchComments = (postId: number): IFetchCommentsAction => ({\r\n  type: PostActionType.FETCH_COMMENTS,\r\n  payload: postId,\r\n})\r\nexport const setComments = (payload: IComment[]): ISetCommentsAction => ({\r\n  type: PostActionType.SET_COMMENTS,\r\n  payload,\r\n})\r\nexport const fetchUpdatePost = (payload: IPost): IFetchUpdatePostAction => ({\r\n  type: PostActionType.FETCH_UPDATE_POST,\r\n  payload,\r\n})\r\nexport const updatePost = (payload: IPost): IUpdatePostAction => ({\r\n  type: PostActionType.UPDATE_POST,\r\n  payload,\r\n})\r\n","import { RootState } from '../../rootReducer'\r\nimport { IPostState, LoadingState } from './type'\r\n\r\nconst selectPostState = (state: RootState) => state.post\r\n\r\nexport const selectPostItem = (state: RootState): IPostState['post'] =>\r\n  selectPostState(state).post\r\nexport const selectCommentsItems = (state: RootState): IPostState['comments'] =>\r\n  selectPostState(state).comments\r\n\r\nexport const selectPostLoadingState = (state: RootState): LoadingState =>\r\n  selectPostState(state).loading\r\n\r\nexport const selectIsPostLoading = (state: RootState): boolean =>\r\n  selectPostLoadingState(state) === LoadingState.LOADING\r\n\r\nexport const selectIsPostLoaded = (state: RootState): boolean =>\r\n  selectPostLoadingState(state) === LoadingState.LOADED\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport {\r\n  fetchComments,\r\n  fetchPost,\r\n  fetchUpdatePost,\r\n} from '../store/ducks/post/actionCreator'\r\nimport {\r\n  selectCommentsItems,\r\n  selectPostItem,\r\n  selectIsPostLoading,\r\n} from '../store/ducks/post/selector'\r\nimport { useQuery } from '../utils/useQuery'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Button from '@material-ui/core/Button'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport ArrowDownI from '@material-ui/icons/KeyboardArrowDown'\r\nimport ArrowUpI from '@material-ui/icons/KeyboardArrowUp'\r\nimport EmailIcon from '@material-ui/icons/AlternateEmail'\r\n\r\nimport { GoBackButton } from '../components/GoBackButton'\r\nimport { PostForm } from '../components/PostForm'\r\nimport { Loader } from '../components/Loader'\r\n\r\nexport const PostDetail = () => {\r\n  const [open, setOpen] = React.useState<boolean>(false)\r\n  const query = useQuery()\r\n  const userId = query.get('userId')\r\n\r\n  const { postId } = useParams<{ postId: string }>()\r\n  const dispatch = useDispatch()\r\n  const post = useSelector(selectPostItem)\r\n  const comments = useSelector(selectCommentsItems)\r\n  const loading = useSelector(selectIsPostLoading)\r\n\r\n  console.log('userId')\r\n\r\n  const updatePost = useCallback(\r\n    (title: string, body: string) => {\r\n      dispatch(fetchUpdatePost({ title, body, id: +postId, userId: +userId! }))\r\n      setOpen(false)\r\n    },\r\n    [dispatch, postId, userId]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (postId) {\r\n      dispatch(fetchPost(+postId))\r\n      dispatch(fetchComments(+postId))\r\n    }\r\n  }, [dispatch, postId])\r\n\r\n  if (loading) return <Loader />\r\n  if (!post) return <div> no yet this post</div>\r\n  return (\r\n    <Grid container spacing={4}>\r\n      <GoBackButton />\r\n      <Grid item xs={12}>\r\n        <Paper elevation={7} style={{ padding: 10 }}>\r\n          <Grid container spacing={1} alignItems='center'>\r\n            <Grid item xs={12}>\r\n              <Typography variant='h6'>{post.title}</Typography>\r\n              <Divider />\r\n              <Typography>{post.body}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button variant='outlined' color='primary' onClick={() => setOpen(!open)}>\r\n                {open ? (\r\n                  <>\r\n                    Close form <ArrowUpI />\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    Open edit form <ArrowDownI />\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          {open && (\r\n            <Grid container justify='center' item>\r\n              <PostForm\r\n                buttonName='Update'\r\n                addPost={updatePost}\r\n                title={post.title}\r\n                body={post.body}\r\n              />\r\n            </Grid>\r\n          )}\r\n        </Paper>\r\n      </Grid>\r\n\r\n      <Grid container item xs={12} spacing={3}>\r\n        <Grid item xs>\r\n          <Typography variant='h5'>Comments:</Typography>\r\n        </Grid>\r\n        {comments?.map((comment) => (\r\n          <Grid item xs={12} key={comment.id}>\r\n            <Paper elevation={7} style={{ padding: 10 }}>\r\n              <Grid container spacing={1} alignItems='center'>\r\n                <Grid item xs={12}>\r\n                  <Typography variant='caption'>\r\n                    <EmailIcon fontSize='small' /> {comment.email}\r\n                  </Typography>\r\n                  <Divider />\r\n\r\n                  <Typography variant='subtitle2'>{comment.name}</Typography>\r\n                  <Divider />\r\n                  <Typography variant='body1'>{comment.body}</Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport LockOpen from '@material-ui/icons/LockOpen'\r\n\r\nimport { fetchAuthUser } from '../store/ducks/auth/actionCreator'\r\n\r\nexport interface SignInFormData {\r\n  username: string\r\n  password: string\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  wrapper: {\r\n    height: 'calc(100vh - 64px)',\r\n  },\r\n})\r\n\r\nexport const SignIn: React.FC = () => {\r\n  const dispatch = useDispatch()\r\n  const classes = useStyles()\r\n  const history = useHistory()\r\n\r\n  const { register, handleSubmit, reset } = useForm<SignInFormData>()\r\n  const onSubmit = (data: SignInFormData) => {\r\n    dispatch(fetchAuthUser(data))\r\n    reset()\r\n    history.push('/')\r\n  }\r\n  return (\r\n    <Grid container justify='center' alignItems='center' className={classes.wrapper}>\r\n      <Grid container justify='center' item xs={12} md={5} sm={7}>\r\n        <LockOpen style={{ fontSize: 40 }} color='primary' />\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <TextField\r\n            inputRef={register({ required: true })}\r\n            label='User name'\r\n            name='username'\r\n            variant='outlined'\r\n            fullWidth\r\n            margin='normal'\r\n            required={true}\r\n          />\r\n          <TextField\r\n            inputRef={register({ required: true })}\r\n            label='Password'\r\n            name='password'\r\n            variant='outlined'\r\n            fullWidth\r\n            required={true}\r\n            margin='normal'\r\n          />\r\n\r\n          <Button\r\n            type='submit'\r\n            variant='contained'\r\n            color='primary'\r\n            style={{ margin: '10px 0' }}>\r\n            SignIn\r\n          </Button>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n","import React from 'react'\n\nimport { Route, Switch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\n\nimport Container from '@material-ui/core/Container'\n\nimport { Header } from './components/Header'\nimport { Users } from './pages/Users'\nimport { Posts } from './pages/Posts'\nimport { PostDetail } from './pages/PostDetail'\nimport { SignIn } from './pages/SignIn'\n\nimport { isCurrentAuthUser } from './store/ducks/auth/actionCreator'\n\nfunction App() {\n  const dispatch = useDispatch()\n  console.log('APP')\n\n  React.useEffect(() => {\n    const currentIsAuth = () => {\n      let user = window.localStorage.getItem('isAuth')\n      if (user) {\n        dispatch(isCurrentAuthUser(JSON.parse(user)))\n      }\n    }\n\n    currentIsAuth()\n  }, [dispatch])\n\n  return (\n    <div>\n      <Header />\n      <Container maxWidth='md'>\n        <Switch>\n          <Route exact path='/' component={Users} />\n          <Route exact path='/posts' component={Posts} />\n          <Route exact path='/posts/:postId' component={PostDetail} />\n          <Route exact path='/auth/signIn' component={SignIn} />\n        </Switch>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import produce, { Draft } from 'immer'\r\nimport { IAuthState, LoadingAuthState, AuthAction, AuthActionType } from './type'\r\n\r\nconst initialAuthState: IAuthState = {\r\n  isAuth: false,\r\n  user: undefined,\r\n  loading: LoadingAuthState.LOADED,\r\n}\r\n\r\nexport const authReducer = produce((draft: Draft<IAuthState>, action: AuthAction) => {\r\n  switch (action.type) {\r\n    case AuthActionType.FETCH_SET_AUTH:\r\n      draft.loading = LoadingAuthState.LOADING\r\n      break\r\n    case AuthActionType.SET_AUTH:\r\n      draft.isAuth = true\r\n      draft.user = action.payload\r\n      draft.loading = LoadingAuthState.LOADED\r\n      break\r\n    case AuthActionType.SET_LOGOUT:\r\n      draft.isAuth = false\r\n      draft.user = undefined\r\n      break\r\n    case AuthActionType.CURRENT_AUTH:\r\n      draft.isAuth = true\r\n      draft.user = action.payload\r\n      break\r\n    case AuthActionType.SET_LOADING:\r\n      draft.loading = action.payload\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n}, initialAuthState)\r\n","import produce, { Draft } from 'immer'\r\nimport { IPostState, LoadingState, PostAction, PostActionType } from './type'\r\n\r\nconst initialPostsState: IPostState = {\r\n  post: undefined,\r\n  comments: [],\r\n  loading: LoadingState.LOADED,\r\n}\r\n\r\nexport const postReducer = produce((draft: Draft<IPostState>, action: PostAction) => {\r\n  switch (action.type) {\r\n    case PostActionType.FETCH_POST:\r\n      draft.post = undefined\r\n      draft.loading = LoadingState.LOADING\r\n      break\r\n    case PostActionType.SET_POST:\r\n      draft.post = action.payload\r\n      draft.loading = LoadingState.LOADED\r\n      break\r\n    case PostActionType.FETCH_COMMENTS:\r\n      draft.comments = []\r\n      break\r\n    case PostActionType.SET_COMMENTS:\r\n      draft.comments = action.payload\r\n      draft.loading = LoadingState.LOADED\r\n      break\r\n    case PostActionType.FETCH_UPDATE_POST:\r\n      draft.loading = LoadingState.LOADING\r\n      break\r\n    case PostActionType.UPDATE_POST:\r\n      draft.post = action.payload\r\n      draft.loading = LoadingState.LOADED\r\n      break\r\n    case PostActionType.SET_LOADING:\r\n      draft.loading = action.payload\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n}, initialPostsState)\r\n","import produce, { Draft } from 'immer'\r\nimport { IPostsState, LoadingState, PostsAction, PostsActionType } from './type'\r\n\r\nconst initialPostsState: IPostsState = {\r\n  posts: [],\r\n  loading: LoadingState.LOADED,\r\n}\r\n\r\nexport const postsReducer = produce((draft: Draft<IPostsState>, action: PostsAction) => {\r\n  switch (action.type) {\r\n    case PostsActionType.FETCH_POSTS:\r\n      draft.posts = []\r\n      draft.loading = LoadingState.LOADING\r\n      break\r\n    case PostsActionType.SET_POSTS:\r\n      draft.posts = action.payload\r\n      draft.loading = LoadingState.LOADED\r\n      break\r\n    case PostsActionType.FETCH_ADD_POST:\r\n      draft.loading = LoadingState.LOADING\r\n      break\r\n    case PostsActionType.ADD_POST:\r\n      draft.posts.push(action.payload)\r\n      draft.loading = LoadingState.LOADED\r\n      break\r\n    case PostsActionType.FETCH_DELETE_POST:\r\n      draft.loading = LoadingState.LOADING\r\n      break\r\n    case PostsActionType.DELETE_POST:\r\n      const index = draft.posts.findIndex((post) => post.id === action.payload)\r\n      if (index !== -1) draft.posts.splice(index, 1)\r\n      draft.loading = LoadingState.LOADED\r\n      break\r\n    case PostsActionType.SET_LOADING:\r\n      draft.loading = action.payload\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n}, initialPostsState)\r\n","import produce, { Draft } from 'immer'\r\nimport { IUserState, LoadingUserState, UsersAction, UsersActionType } from './type'\r\n\r\nconst initialUsersState: IUserState = {\r\n  users: [],\r\n  loading: LoadingUserState.LOADED,\r\n}\r\n\r\nexport const usersReducer = produce((draft: Draft<IUserState>, action: UsersAction) => {\r\n  switch (action.type) {\r\n    case UsersActionType.FETCH_USERS:\r\n      draft.users = []\r\n      draft.loading = LoadingUserState.LOADING\r\n      break\r\n    case UsersActionType.SET_USERS:\r\n      draft.users = action.payload\r\n      draft.loading = LoadingUserState.LOADED\r\n      break\r\n    case UsersActionType.SET_LOADING:\r\n      draft.loading = action.payload\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n}, initialUsersState)\r\n","import { combineReducers } from 'redux'\r\nimport { authReducer } from './ducks/auth/reducer'\r\nimport { IAuthState } from './ducks/auth/type'\r\nimport { postReducer } from './ducks/post/reducer'\r\nimport { IPostState } from './ducks/post/type'\r\nimport { postsReducer } from './ducks/posts/reducer'\r\nimport { IPostsState } from './ducks/posts/type'\r\nimport { usersReducer } from './ducks/users/reducer'\r\nimport { IUserState } from './ducks/users/type'\r\n\r\nexport const rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  posts: postsReducer,\r\n  post: postReducer,\r\n  users: usersReducer,\r\n})\r\n\r\nexport type RootState = {\r\n  auth: IAuthState\r\n  post: IPostState\r\n  posts: IPostsState\r\n  users: IUserState\r\n}\r\n","import axios from 'axios'\r\nimport { SignInFormData } from '../pages/SignIn'\r\nimport { IAuthUser } from '../store/ducks/auth/type'\r\nimport { IComment, IPost, IUser } from '../type'\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n})\r\n\r\nexport const userAPI = {\r\n    async getAll(): Promise<IUser[]> {\r\n        const response = await instance.get<Array<IUser>>('users')\r\n        return response.data\r\n    },\r\n    async authPost(body: SignInFormData): Promise<IAuthUser> {\r\n        const response = await instance.post<IAuthUser>('users', body)\r\n        return response.data\r\n    }\r\n}\r\n\r\nexport const postsAPI = {\r\n    async getByUserId(userId: number) {\r\n        const response = await instance.get<Array<IPost>>(`posts?userId=${userId}`)\r\n        return response.data\r\n    },\r\n    async getByPostId(postId: number) {\r\n        const response = await instance.get<IPost>(`posts/${postId}`)\r\n        return response.data\r\n    },\r\n    async getComments(postId: number) {\r\n        const response = await instance.get<Array<IComment>>(`posts/${postId}/comments`)\r\n        return response.data\r\n    },\r\n    async create(body: { title: string, body: string, userId: number }) {\r\n        const response = await instance.post<IPost>('posts', body)\r\n        return response.data\r\n    },\r\n    async update(body: IPost, id: number) {\r\n        const response = await instance.put<IPost>(`posts/${id}`, body)\r\n        return response.data\r\n    },\r\n    async delete(postId: number) {\r\n        const response = await instance.delete<number>(`posts/${postId}`)\r\n        return response.status\r\n    },\r\n}","import { takeEvery, call, put } from 'redux-saga/effects'\r\nimport { userAPI } from '../../../api'\r\nimport { setAuthUser, setLoadingAuth } from './actionCreator'\r\nimport { AuthActionType, IFetchAuthUserAction, LoadingAuthState } from './type'\r\n\r\nfunction* fetchAuthSaga({ payload }: IFetchAuthUserAction) {\r\n  try {\r\n    const user = yield call(userAPI.authPost, payload)\r\n    window.localStorage.setItem('isAuth', JSON.stringify(user))\r\n    yield put(setAuthUser(user))\r\n  } catch (e) {\r\n    console.log(e)\r\n    yield put(setLoadingAuth(LoadingAuthState.ERROR))\r\n  }\r\n}\r\n\r\nexport function* sagaAuthWatcher() {\r\n  yield takeEvery(AuthActionType.FETCH_SET_AUTH, fetchAuthSaga)\r\n}\r\n","import { takeEvery, call, put } from 'redux-saga/effects'\r\nimport { postsAPI } from '../../../api'\r\nimport { setComments, setLoadingPost, setPost, updatePost } from './actionCreator'\r\nimport {\r\n  IFetchCommentsAction,\r\n  IFetchPostAction,\r\n  IFetchUpdatePostAction,\r\n  LoadingState,\r\n  PostActionType,\r\n} from './type'\r\n\r\nfunction* workerFetchPostSaga({ payload }: IFetchPostAction) {\r\n  try {\r\n    const post = yield call(postsAPI.getByPostId, payload)\r\n    yield put(setPost(post))\r\n  } catch (e) {\r\n    console.log(e)\r\n    yield put(setLoadingPost(LoadingState.ERROR))\r\n  }\r\n}\r\nfunction* workerFetchCommentsSaga({ payload }: IFetchCommentsAction) {\r\n  try {\r\n    const comments = yield call(postsAPI.getComments, payload)\r\n    yield put(setComments(comments))\r\n  } catch (e) {\r\n    console.log(e)\r\n    yield put(setLoadingPost(LoadingState.ERROR))\r\n  }\r\n}\r\n\r\nfunction* workerUpdatePostSaga({ payload }: IFetchUpdatePostAction) {\r\n  try {\r\n    const post = yield call(postsAPI.update, payload, payload.id)\r\n    yield put(updatePost(post))\r\n  } catch (e) {\r\n    console.log(e)\r\n    yield put(setLoadingPost(LoadingState.ERROR))\r\n  }\r\n}\r\nexport function* sagaPostWatcher() {\r\n  yield takeEvery(PostActionType.FETCH_POST, workerFetchPostSaga)\r\n  yield takeEvery(PostActionType.FETCH_UPDATE_POST, workerUpdatePostSaga)\r\n  yield takeEvery(PostActionType.FETCH_COMMENTS, workerFetchCommentsSaga)\r\n}\r\n","import { takeEvery, call, put } from 'redux-saga/effects'\r\nimport { postsAPI } from '../../../api'\r\nimport { addPost, deletePost, setLoadingPost, setPosts } from './actionCreator'\r\nimport {\r\n  IFetchAction,\r\n  IFetchAddPostAction,\r\n  IFetchDeletePostAction,\r\n  LoadingState,\r\n  PostsActionType,\r\n} from './type'\r\n\r\nfunction* fetchPostsSaga({ payload }: IFetchAction) {\r\n  try {\r\n    const posts = yield call(postsAPI.getByUserId, payload)\r\n    yield put(setPosts(posts))\r\n  } catch (e) {\r\n    console.log(e)\r\n    yield put(setLoadingPost(LoadingState.ERROR))\r\n  }\r\n}\r\nfunction* addPostSaga({ payload }: IFetchAddPostAction) {\r\n  try {\r\n    const post = yield call(postsAPI.create, payload)\r\n\r\n    yield put(addPost(post))\r\n  } catch (e) {\r\n    console.log(e)\r\n    yield put(setLoadingPost(LoadingState.ERROR))\r\n  }\r\n}\r\nfunction* deletePostSaga({ payload }: IFetchDeletePostAction) {\r\n  try {\r\n    const status = yield call(postsAPI.delete, payload)\r\n\r\n    if (status === 200) {\r\n      yield put(deletePost(payload))\r\n    }\r\n  } catch (e) {\r\n    console.log(e)\r\n    yield put(setLoadingPost(LoadingState.ERROR))\r\n  }\r\n}\r\n\r\nexport function* sagaPostsWatcher() {\r\n  yield takeEvery(PostsActionType.FETCH_POSTS, fetchPostsSaga)\r\n  yield takeEvery(PostsActionType.FETCH_ADD_POST, addPostSaga)\r\n  yield takeEvery(PostsActionType.FETCH_DELETE_POST, deletePostSaga)\r\n}\r\n","import { takeEvery, call, put } from 'redux-saga/effects'\r\nimport { userAPI } from '../../../api'\r\nimport { setLoadingUsers, setUsers } from './actionCreator'\r\nimport { LoadingUserState, UsersActionType } from './type'\r\n\r\nfunction* fetchUsersSaga() {\r\n  try {\r\n    const users = yield call(userAPI.getAll)\r\n    yield put(setUsers(users))\r\n  } catch (e) {\r\n    console.log(e)\r\n    yield put(setLoadingUsers(LoadingUserState.ERROR))\r\n  }\r\n}\r\n\r\nexport function* sagaUserWatcher() {\r\n  yield takeEvery(UsersActionType.FETCH_USERS, fetchUsersSaga)\r\n}\r\n","import { all } from 'redux-saga/effects'\r\nimport { sagaAuthWatcher } from './ducks/auth/saga'\r\nimport { sagaPostWatcher } from './ducks/post/saga'\r\nimport { sagaPostsWatcher } from './ducks/posts/saga'\r\nimport { sagaUserWatcher } from './ducks/users/saga'\r\n\r\nexport function* rootSaga() {\r\n  yield all([sagaPostWatcher(), sagaPostsWatcher(), sagaUserWatcher(), sagaAuthWatcher()])\r\n}\r\n","import { applyMiddleware, compose, createStore } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { rootReducer } from './rootReducer'\r\nimport { rootSaga } from './rootSaga'\r\n\r\nconst saga = createSagaMiddleware()\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(saga)))\r\n\r\nsaga.run(rootSaga)\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport { store } from './store/store'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename='/incora-test'>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n    ,\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}